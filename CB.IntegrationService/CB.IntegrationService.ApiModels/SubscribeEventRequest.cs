/* 
 * Education Brands Integration Service APIs
 *
 * The integration framework is an attempt to define a standard and simple socket each brand can plug in to interact with other EB products. It defines what each product needs to do to integrate with other products. It has a set of API to interact with other products and what each product should implement to receive communication from other products. This is an API specification detailing the APIs for Education Brands IntegrationService.  Most of these APIs will be implemented in EBIS.  The APIs in the 'Product Endpoints' section has to be implemented by each of the Products.  <b>NOTE - <i>This specification is still in early development stage and is subject to change without notice.</i></b> 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sobin@schoolspeak.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace CB.IntegrationService.ApiModels
{
    /// <summary>
    /// SubscribeEventRequest
    /// </summary>
    [DataContract]
    public partial class SubscribeEventRequest :  IEquatable<SubscribeEventRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscribeEventRequest" /> class.
        /// </summary>
        /// <param name="EbProductID">EBID of the product the requesting product.</param>
        /// <param name="ProductName">Name of the product.</param>
        /// <param name="EbInstitutionId">EB Institution Id.</param>
        /// <param name="InstitutionName">Institution Name.</param>
        /// <param name="EventName">Name of the published event.</param>
        /// <param name="Protocol">Http protocol used.</param>
        /// <param name="FilterPolicy">FilterPolicy.</param>
        public SubscribeEventRequest(string EbProductID = default(string), string ProductName = default(string), string EbInstitutionId = default(string), string InstitutionName = default(string), string EventName = default(string), string Protocol = default(string), FilterPolicy FilterPolicy = default(FilterPolicy))
        {
            this.EbProductID = EbProductID;
            this.ProductName = ProductName;
            this.EbInstitutionId = EbInstitutionId;
            this.InstitutionName = InstitutionName;
            this.EventName = EventName;
            this.Protocol = Protocol;
            this.FilterPolicy = FilterPolicy;
        }
        
        /// <summary>
        /// EBID of the product the requesting product
        /// </summary>
        /// <value>EBID of the product the requesting product</value>
        [DataMember(Name="ebProductID", EmitDefaultValue=false)]
        public string EbProductID { get; set; }

        /// <summary>
        /// Name of the product
        /// </summary>
        /// <value>Name of the product</value>
        [DataMember(Name="productName", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// EB Institution Id
        /// </summary>
        /// <value>EB Institution Id</value>
        [DataMember(Name="ebInstitutionId", EmitDefaultValue=false)]
        public string EbInstitutionId { get; set; }

        /// <summary>
        /// Institution Name
        /// </summary>
        /// <value>Institution Name</value>
        [DataMember(Name="institutionName", EmitDefaultValue=false)]
        public string InstitutionName { get; set; }

        /// <summary>
        /// Name of the published event
        /// </summary>
        /// <value>Name of the published event</value>
        [DataMember(Name="eventName", EmitDefaultValue=false)]
        public string EventName { get; set; }

        /// <summary>
        /// Http protocol used
        /// </summary>
        /// <value>Http protocol used</value>
        [DataMember(Name="protocol", EmitDefaultValue=false)]
        public string Protocol { get; set; }

        /// <summary>
        /// Gets or Sets FilterPolicy
        /// </summary>
        [DataMember(Name="filterPolicy", EmitDefaultValue=false)]
        public FilterPolicy FilterPolicy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscribeEventRequest {\n");
            sb.Append("  EbProductID: ").Append(EbProductID).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  EbInstitutionId: ").Append(EbInstitutionId).Append("\n");
            sb.Append("  InstitutionName: ").Append(InstitutionName).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  FilterPolicy: ").Append(FilterPolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscribeEventRequest);
        }

        /// <summary>
        /// Returns true if SubscribeEventRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscribeEventRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscribeEventRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EbProductID == input.EbProductID ||
                    (this.EbProductID != null &&
                    this.EbProductID.Equals(input.EbProductID))
                ) && 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.EbInstitutionId == input.EbInstitutionId ||
                    (this.EbInstitutionId != null &&
                    this.EbInstitutionId.Equals(input.EbInstitutionId))
                ) && 
                (
                    this.InstitutionName == input.InstitutionName ||
                    (this.InstitutionName != null &&
                    this.InstitutionName.Equals(input.InstitutionName))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.FilterPolicy == input.FilterPolicy ||
                    (this.FilterPolicy != null &&
                    this.FilterPolicy.Equals(input.FilterPolicy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EbProductID != null)
                    hashCode = hashCode * 59 + this.EbProductID.GetHashCode();
                if (this.ProductName != null)
                    hashCode = hashCode * 59 + this.ProductName.GetHashCode();
                if (this.EbInstitutionId != null)
                    hashCode = hashCode * 59 + this.EbInstitutionId.GetHashCode();
                if (this.InstitutionName != null)
                    hashCode = hashCode * 59 + this.InstitutionName.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.Protocol != null)
                    hashCode = hashCode * 59 + this.Protocol.GetHashCode();
                if (this.FilterPolicy != null)
                    hashCode = hashCode * 59 + this.FilterPolicy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
