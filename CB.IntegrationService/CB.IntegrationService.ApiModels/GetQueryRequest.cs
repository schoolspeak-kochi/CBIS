/* 
 * Education Brands Integration Service APIs
 *
 * The integration framework is an attempt to define a standard and simple socket each brand can plug in to interact with other EB products. It defines what each product needs to do to integrate with other products. It has a set of API to interact with other products and what each product should implement to receive communication from other products. This is an API specification detailing the APIs for Education Brands IntegrationService.  Most of these APIs will be implemented in EBIS.  The APIs in the 'Product Endpoints' section has to be implemented by each of the Products.  <b>NOTE - <i>This specification is still in early development stage and is subject to change without notice.</i></b> 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sobin@schoolspeak.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace CB.IntegrationService.ApiModels
{
    /// <summary>
    /// GetQueryRequest
    /// </summary>
    [DataContract]
    public partial class GetQueryRequest :  IEquatable<GetQueryRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetQueryRequest" /> class.
        /// </summary>
        /// <param name="ProductName">Name of the Product.</param>
        /// <param name="EbProductId">Education brands Id for the product.</param>
        /// <param name="InstitutionName">Name of the institution.</param>
        /// <param name="EbInstitutionId">Name of the institution.</param>
        /// <param name="RecordType">The name of the Standard Data Set type to be queried.</param>
        /// <param name="Sections">The sections of the standard data set to populate in the result.</param>
        /// <param name="Filters">Array of conditions to filter the result data.</param>
        public GetQueryRequest(string ProductName = default(string), string EbProductId = default(string), string InstitutionName = default(string), string EbInstitutionId = default(string), string RecordType = default(string), List<string> Sections = default(List<string>), List<Filters> Filters = default(List<Filters>))
        {
            this.ProductName = ProductName;
            this.EbProductId = EbProductId;
            this.InstitutionName = InstitutionName;
            this.EbInstitutionId = EbInstitutionId;
            this.RecordType = RecordType;
            this.Sections = Sections;
            this.Filters = Filters;
        }
        
        /// <summary>
        /// Name of the Product
        /// </summary>
        /// <value>Name of the Product</value>
        [DataMember(Name="productName", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// Education brands Id for the product
        /// </summary>
        /// <value>Education brands Id for the product</value>
        [DataMember(Name="ebProductId", EmitDefaultValue=false)]
        public string EbProductId { get; set; }

        /// <summary>
        /// Name of the institution
        /// </summary>
        /// <value>Name of the institution</value>
        [DataMember(Name="institutionName", EmitDefaultValue=false)]
        public string InstitutionName { get; set; }

        /// <summary>
        /// Name of the institution
        /// </summary>
        /// <value>Name of the institution</value>
        [DataMember(Name="ebInstitutionId", EmitDefaultValue=false)]
        public string EbInstitutionId { get; set; }

        /// <summary>
        /// The name of the Standard Data Set type to be queried
        /// </summary>
        /// <value>The name of the Standard Data Set type to be queried</value>
        [DataMember(Name="RecordType", EmitDefaultValue=false)]
        public string RecordType { get; set; }

        /// <summary>
        /// The sections of the standard data set to populate in the result
        /// </summary>
        /// <value>The sections of the standard data set to populate in the result</value>
        [DataMember(Name="sections", EmitDefaultValue=false)]
        public List<string> Sections { get; set; }

        /// <summary>
        /// Array of conditions to filter the result data
        /// </summary>
        /// <value>Array of conditions to filter the result data</value>
        [DataMember(Name="filters", EmitDefaultValue=false)]
        public List<Filters> Filters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetQueryRequest {\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  EbProductId: ").Append(EbProductId).Append("\n");
            sb.Append("  InstitutionName: ").Append(InstitutionName).Append("\n");
            sb.Append("  EbInstitutionId: ").Append(EbInstitutionId).Append("\n");
            sb.Append("  RecordType: ").Append(RecordType).Append("\n");
            sb.Append("  Sections: ").Append(Sections).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetQueryRequest);
        }

        /// <summary>
        /// Returns true if GetQueryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetQueryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetQueryRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.EbProductId == input.EbProductId ||
                    (this.EbProductId != null &&
                    this.EbProductId.Equals(input.EbProductId))
                ) && 
                (
                    this.InstitutionName == input.InstitutionName ||
                    (this.InstitutionName != null &&
                    this.InstitutionName.Equals(input.InstitutionName))
                ) && 
                (
                    this.EbInstitutionId == input.EbInstitutionId ||
                    (this.EbInstitutionId != null &&
                    this.EbInstitutionId.Equals(input.EbInstitutionId))
                ) && 
                (
                    this.RecordType == input.RecordType ||
                    (this.RecordType != null &&
                    this.RecordType.Equals(input.RecordType))
                ) && 
                (
                    this.Sections == input.Sections ||
                    this.Sections != null &&
                    this.Sections.SequenceEqual(input.Sections)
                ) && 
                (
                    this.Filters == input.Filters ||
                    this.Filters != null &&
                    this.Filters.SequenceEqual(input.Filters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductName != null)
                    hashCode = hashCode * 59 + this.ProductName.GetHashCode();
                if (this.EbProductId != null)
                    hashCode = hashCode * 59 + this.EbProductId.GetHashCode();
                if (this.InstitutionName != null)
                    hashCode = hashCode * 59 + this.InstitutionName.GetHashCode();
                if (this.EbInstitutionId != null)
                    hashCode = hashCode * 59 + this.EbInstitutionId.GetHashCode();
                if (this.RecordType != null)
                    hashCode = hashCode * 59 + this.RecordType.GetHashCode();
                if (this.Sections != null)
                    hashCode = hashCode * 59 + this.Sections.GetHashCode();
                if (this.Filters != null)
                    hashCode = hashCode * 59 + this.Filters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
