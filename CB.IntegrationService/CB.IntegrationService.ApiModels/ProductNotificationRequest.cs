/* 
 * Education Brands Integration Service APIs
 *
 * The integration framework is an attempt to define a standard and simple socket each brand can plug in to interact with other EB products. It defines what each product needs to do to integrate with other products. It has a set of API to interact with other products and what each product should implement to receive communication from other products. This is an API specification detailing the APIs for Education Brands IntegrationService.  Most of these APIs will be implemented in EBIS.  The APIs in the 'Product Endpoints' section has to be implemented by each of the Products.  <b>NOTE - <i>This specification is still in early development stage and is subject to change without notice.</i></b> 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sobin@schoolspeak.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace CB.IntegrationService.ApiModels
{
    /// <summary>
    /// The otification request that is delivered to the product endpoint when a notification is published by another product
    /// </summary>
    [DataContract]
    public partial class ProductNotificationRequest :  IEquatable<ProductNotificationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductNotificationRequest" /> class.
        /// </summary>
        /// <param name="PublishingProductName">The name of the product that published the notification.</param>
        /// <param name="InstitutionName">The name of the institution.</param>
        /// <param name="EbInstitutionId">The Education Brands institution id.</param>
        /// <param name="EventName">The name of the event against which the notification was published.</param>
        /// <param name="EventToken">The unique token for the event. Use this token to acknowledge the event..</param>
        /// <param name="MessageType">The name of the standard data type of the Payload.</param>
        /// <param name="AcknowledgementRequired">A value indicating whether the notifier has requested for acknowledgement or not.</param>
        /// <param name="Payload">The serialized string of the actual data (standard data type) - MUST be same as the standard data type specified in the messageType field.</param>
        public ProductNotificationRequest(string PublishingProductName = default(string), string InstitutionName = default(string), string EbInstitutionId = default(string), string EventName = default(string), string EventToken = default(string), string MessageType = default(string), bool? AcknowledgementRequired = default(bool?), string Payload = default(string))
        {
            this.PublishingProductName = PublishingProductName;
            this.InstitutionName = InstitutionName;
            this.EbInstitutionId = EbInstitutionId;
            this.EventName = EventName;
            this.EventToken = EventToken;
            this.MessageType = MessageType;
            this.AcknowledgementRequired = AcknowledgementRequired;
            this.Payload = Payload;
        }
        
        /// <summary>
        /// The name of the product that published the notification
        /// </summary>
        /// <value>The name of the product that published the notification</value>
        [DataMember(Name="publishingProductName", EmitDefaultValue=false)]
        public string PublishingProductName { get; set; }

        /// <summary>
        /// The name of the institution
        /// </summary>
        /// <value>The name of the institution</value>
        [DataMember(Name="institutionName", EmitDefaultValue=false)]
        public string InstitutionName { get; set; }

        /// <summary>
        /// The Education Brands institution id
        /// </summary>
        /// <value>The Education Brands institution id</value>
        [DataMember(Name="ebInstitutionId", EmitDefaultValue=false)]
        public string EbInstitutionId { get; set; }

        /// <summary>
        /// The name of the event against which the notification was published
        /// </summary>
        /// <value>The name of the event against which the notification was published</value>
        [DataMember(Name="eventName", EmitDefaultValue=false)]
        public string EventName { get; set; }

        /// <summary>
        /// The unique token for the event. Use this token to acknowledge the event.
        /// </summary>
        /// <value>The unique token for the event. Use this token to acknowledge the event.</value>
        [DataMember(Name="eventToken", EmitDefaultValue=false)]
        public string EventToken { get; set; }

        /// <summary>
        /// The name of the standard data type of the Payload
        /// </summary>
        /// <value>The name of the standard data type of the Payload</value>
        [DataMember(Name="messageType", EmitDefaultValue=false)]
        public string MessageType { get; set; }

        /// <summary>
        /// A value indicating whether the notifier has requested for acknowledgement or not
        /// </summary>
        /// <value>A value indicating whether the notifier has requested for acknowledgement or not</value>
        [DataMember(Name="acknowledgementRequired", EmitDefaultValue=false)]
        public bool? AcknowledgementRequired { get; set; }

        /// <summary>
        /// The serialized string of the actual data (standard data type) - MUST be same as the standard data type specified in the messageType field
        /// </summary>
        /// <value>The serialized string of the actual data (standard data type) - MUST be same as the standard data type specified in the messageType field</value>
        [DataMember(Name="payload", EmitDefaultValue=false)]
        public string Payload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductNotificationRequest {\n");
            sb.Append("  PublishingProductName: ").Append(PublishingProductName).Append("\n");
            sb.Append("  InstitutionName: ").Append(InstitutionName).Append("\n");
            sb.Append("  EbInstitutionId: ").Append(EbInstitutionId).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  EventToken: ").Append(EventToken).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  AcknowledgementRequired: ").Append(AcknowledgementRequired).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductNotificationRequest);
        }

        /// <summary>
        /// Returns true if ProductNotificationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductNotificationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductNotificationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PublishingProductName == input.PublishingProductName ||
                    (this.PublishingProductName != null &&
                    this.PublishingProductName.Equals(input.PublishingProductName))
                ) && 
                (
                    this.InstitutionName == input.InstitutionName ||
                    (this.InstitutionName != null &&
                    this.InstitutionName.Equals(input.InstitutionName))
                ) && 
                (
                    this.EbInstitutionId == input.EbInstitutionId ||
                    (this.EbInstitutionId != null &&
                    this.EbInstitutionId.Equals(input.EbInstitutionId))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.EventToken == input.EventToken ||
                    (this.EventToken != null &&
                    this.EventToken.Equals(input.EventToken))
                ) && 
                (
                    this.MessageType == input.MessageType ||
                    (this.MessageType != null &&
                    this.MessageType.Equals(input.MessageType))
                ) && 
                (
                    this.AcknowledgementRequired == input.AcknowledgementRequired ||
                    (this.AcknowledgementRequired != null &&
                    this.AcknowledgementRequired.Equals(input.AcknowledgementRequired))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PublishingProductName != null)
                    hashCode = hashCode * 59 + this.PublishingProductName.GetHashCode();
                if (this.InstitutionName != null)
                    hashCode = hashCode * 59 + this.InstitutionName.GetHashCode();
                if (this.EbInstitutionId != null)
                    hashCode = hashCode * 59 + this.EbInstitutionId.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.EventToken != null)
                    hashCode = hashCode * 59 + this.EventToken.GetHashCode();
                if (this.MessageType != null)
                    hashCode = hashCode * 59 + this.MessageType.GetHashCode();
                if (this.AcknowledgementRequired != null)
                    hashCode = hashCode * 59 + this.AcknowledgementRequired.GetHashCode();
                if (this.Payload != null)
                    hashCode = hashCode * 59 + this.Payload.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
