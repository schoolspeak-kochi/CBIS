/*
 * Education Brands Integration Service APIs
 *
 * The integration framework is an attempt to define a standard and simple socket each brand can plug in to interact with other EB products. It defines what each product needs to do to integrate with other products. It has a set of API to interact with other products and what each product should implement to receive communication from other products. This is an API specification detailing the APIs for Education Brands IntegrationService.  Most of these APIs will be implemented in EBIS.  The APIs in the 'Product Endpoints' section has to be implemented by each of the Products.  <b>NOTE - <i>This specification is still in early development stage and is subject to change without notice.</i></b> 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sobin@schoolspeak.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using CB.IntegrationService.ApiModels;
using CB.IntegrationService.Utils;
using System;
using System.Web.Http;

namespace CommunityBrands.IntegrationService.Api.Controllers
{
    /// <summary>
    /// Defines the product Api controller
    /// </summary>
    [CB.IntegrationService.Api.Filters.IdentityBasicAuthentication]
    [Authorize]
    public class ProductController : ApiController
    { 
        /// <summary>
        /// De-register the product
        /// </summary>
        /// <remarks>De-register the product by its Ebucation Brands Id</remarks>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <response code="200">OK. The product de-registered with EBIS</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpDelete]
        [Route("CBIS/1.0.0/products/{ebProductId}")]
        public virtual void DeRegisterProductById(string ebProductId)
        {
            Logger.LogTrace($" API : CBIS/1.0.0/products/{ebProductId}");
            throw new NotImplementedException();
        }

        /// <summary>
        /// Get a product by EB Id
        /// </summary>
        /// <remarks>Gets the details of a product by its Ebucation Brands Id</remarks>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <response code="200">OK. The product details as registered with EBIS</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("CBIS/1.0.0/products/{ebProductId}")]
        public virtual IHttpActionResult GetProductById(string ebProductId)
        {
            Logger.LogTrace($" API : CBIS/1.0.0/products/{ebProductId}");
            return BadRequest("This method has not been implemented");
        }

        /// <summary>
        /// Get list of EB products
        /// </summary>
        
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <response code="200">List of products registered with EBIS</response>
        [HttpGet]
        [Route("CBIS/1.0.0/products")]
        public virtual IHttpActionResult GetProducts()
        {
            Logger.LogTrace(" API : CBIS/1.0.0/products");
            return BadRequest("This method has not been implemented");
        }

        /// <summary>
        /// Register a new product
        /// </summary>
        
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="registerProductRequest"></param>
        /// <response code="200">Product registered successfully with EBIS</response>
        [HttpPost]
        [Route("CBIS/1.0.0/products")]
        public virtual IHttpActionResult PostProduct([FromBody]Product registerProductRequest)
        {
            Logger.LogTrace(" API : CBIS/1.0.0/products");
            return BadRequest("This method has not been implemented");
        }

        /// <summary>
        /// Update a product by EB Id
        /// </summary>
        /// <remarks>Updates the details of a product by its Ebucation Brands Id</remarks>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="contentType">The Content type.</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <param name="product">The updated product object</param>
        /// <response code="200">OK. The product details as registered with EBIS</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPut]
        [Route("CBIS/1.0.0/products/{ebProductId}")]
        public virtual IHttpActionResult UpdateProductById(string ebProductId, [FromBody]Product product)
        {
            Logger.LogTrace($" API : CBIS/1.0.0/products/{ebProductId}");
            return BadRequest("This method has not been implemented");
        }
    }
}
