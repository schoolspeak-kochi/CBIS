/*
 * Education Brands Integration Service APIs
 *
 * The integration framework is an attempt to define a standard and simple socket each brand can plug in to interact with other EB products. It defines what each product needs to do to integrate with other products. It has a set of API to interact with other products and what each product should implement to receive communication from other products. This is an API specification detailing the APIs for Education Brands IntegrationService.  Most of these APIs will be implemented in EBIS.  The APIs in the 'Product Endpoints' section has to be implemented by each of the Products.  <b>NOTE - <i>This specification is still in early development stage and is subject to change without notice.</i></b> 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sobin@schoolspeak.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using CB.IntegrationService.ApiModels;
using System;
using System.Web.Http;

namespace EducationBrands.IntegrationService.Api.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class ProductEndpointsController : ApiController
    { 
        /// <summary>
        /// Product endpoint to receive notification acknowledgement from EBIS
        /// </summary>
        /// <remarks>Acnowledge API facilitate the product to keep track of the request and its status whether it has delivered to the end product successfully or not</remarks>
        /// <param name="ackNotification"></param>
        /// <response code="200">Acknowledgment status from event subscriber</response>
        [HttpPost]
        [Route("EducationBrands/EBIS/1.0.0/productBaseUrl/acknowledgeNotification")]
        public virtual void AckNotificationRequest([FromBody]AckNotification ackNotification)
        { 
            throw new NotImplementedException();
        }

        /// <summary>
        /// Product endpoint to receive Error notifications from EBIS
        /// </summary>
        /// <remarks>The Error API is can be used by the product to keep track of the errors and abnormalities occured while processing the request.</remarks>
        /// <param name="errorNotification"></param>
        /// <response code="200">Error Notifications from EBIS</response>
        [HttpPost]
        [Route("EducationBrands/EBIS/1.0.0/productBaseUrl/errorNotification")]
        public virtual void ErrorNotificationRequest([FromBody]ErrorNotificationRequest errorNotification)
        { 
            throw new NotImplementedException();
        }

        /// <summary>
        /// Product endpoint to receive Query requests from EBIS
        /// </summary>
        /// <remarks>Query APIs are useful when a product wants to proactively get some information from another product. This is often the case when a system wants to request current information in another system. Using these APIs enables you to exchange data synchronously.</remarks>
        /// <param name="getQueryRequest"></param>
        /// <response code="200">Successfully returned the data.</response>
        [HttpPost]
        [Route("EducationBrands/EBIS/1.0.0/productBaseUrl/query")]
        public virtual IHttpActionResult GetDataQueryRequest([FromBody]GetQueryRequest getQueryRequest)
        { 
            return BadRequest("This method has not been implemented");
        }

        /// <summary>
        /// Product endpoint to receive the notifications for an event from EBIS
        /// </summary>
        /// <remarks>The notification endpoint will be invoked by EBIS to facilitate Notification API. THis is the endpoint that EBIS will call when it has to notify a product about any event that has been published.</remarks>
        /// <param name="productNotificationRequest"></param>
        /// <response code="200">The product must return 200 OK to convey success to EBIS. A response of 200 OK will tell EBIS that the nootification was successful. Otherwise, it may attempt to retry notifications.</response>
        [HttpPost]
        [Route("EducationBrands/EBIS/1.0.0/productBaseUrl/notification")]        
        public virtual void ProductNotification([FromBody]ProductNotificationRequest productNotificationRequest)
        { 
            throw new NotImplementedException();
        }
    }
}
