/* 
 * Education Brands Integration Service APIs
 *
 * The integration framework is an attempt to define a standard and simple socket each brand can plug in to interact with other EB products. It defines what each product needs to do to integrate with other products. It has a set of API to interact with other products and what each product should implement to receive communication from other products. This is an API specification detailing the APIs for Education Brands IntegrationService.  Most of these APIs will be implemented in EBIS.  The APIs in the 'Product Endpoints' section has to be implemented by each of the Products.  <b>NOTE - <i>This specification is still in early development stage and is subject to change without notice.</i></b> 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sobin@schoolspeak.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using CB.IntegrationService.ApiClient.Client;
using CB.IntegrationService.ApiModels;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace CB.IntegrationService.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// De-register the product
        /// </summary>
        /// <remarks>
        /// De-register the product by its Ebucation Brands Id
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns></returns>
        void DeRegisterProductById (string ebProductId);

        /// <summary>
        /// De-register the product
        /// </summary>
        /// <remarks>
        /// De-register the product by its Ebucation Brands Id
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeRegisterProductByIdWithHttpInfo (string ebProductId);
        /// <summary>
        /// Get a product by EB Id
        /// </summary>
        /// <remarks>
        /// Gets the details of a product by its Ebucation Brands Id
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns>Product</returns>
        Product GetProductById (string authorization, string ebProductId);

        /// <summary>
        /// Get a product by EB Id
        /// </summary>
        /// <remarks>
        /// Gets the details of a product by its Ebucation Brands Id
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> GetProductByIdWithHttpInfo (string authorization, string ebProductId);
        /// <summary>
        /// Get list of EB products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <returns>List&lt;Product&gt;</returns>
        List<Product> GetProducts (string authorization);

        /// <summary>
        /// Get list of EB products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        ApiResponse<List<Product>> GetProductsWithHttpInfo (string authorization);
        /// <summary>
        /// Register a new product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="registerProductRequest"> (optional)</param>
        /// <returns>RegisterProductResponse</returns>
        RegisterProductResponse PostProduct (string authorization, Product registerProductRequest = null);

        /// <summary>
        /// Register a new product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="registerProductRequest"> (optional)</param>
        /// <returns>ApiResponse of RegisterProductResponse</returns>
        ApiResponse<RegisterProductResponse> PostProductWithHttpInfo (string authorization, Product registerProductRequest = null);
        /// <summary>
        /// Update a product by EB Id
        /// </summary>
        /// <remarks>
        /// Updates the details of a product by its Ebucation Brands Id
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="contentType">The Content type.</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <param name="product">The updated product object</param>
        /// <returns>Product</returns>
        Product UpdateProductById (string authorization, string contentType, string ebProductId, Product product);

        /// <summary>
        /// Update a product by EB Id
        /// </summary>
        /// <remarks>
        /// Updates the details of a product by its Ebucation Brands Id
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="contentType">The Content type.</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <param name="product">The updated product object</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> UpdateProductByIdWithHttpInfo (string authorization, string contentType, string ebProductId, Product product);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// De-register the product
        /// </summary>
        /// <remarks>
        /// De-register the product by its Ebucation Brands Id
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeRegisterProductByIdAsync (string ebProductId);

        /// <summary>
        /// De-register the product
        /// </summary>
        /// <remarks>
        /// De-register the product by its Ebucation Brands Id
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeRegisterProductByIdAsyncWithHttpInfo (string ebProductId);
        /// <summary>
        /// Get a product by EB Id
        /// </summary>
        /// <remarks>
        /// Gets the details of a product by its Ebucation Brands Id
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> GetProductByIdAsync (string authorization, string ebProductId);

        /// <summary>
        /// Get a product by EB Id
        /// </summary>
        /// <remarks>
        /// Gets the details of a product by its Ebucation Brands Id
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> GetProductByIdAsyncWithHttpInfo (string authorization, string ebProductId);
        /// <summary>
        /// Get list of EB products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> GetProductsAsync (string authorization);

        /// <summary>
        /// Get list of EB products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> GetProductsAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// Register a new product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="registerProductRequest"> (optional)</param>
        /// <returns>Task of RegisterProductResponse</returns>
        System.Threading.Tasks.Task<RegisterProductResponse> PostProductAsync (string authorization, Product registerProductRequest = null);

        /// <summary>
        /// Register a new product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="registerProductRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (RegisterProductResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegisterProductResponse>> PostProductAsyncWithHttpInfo (string authorization, Product registerProductRequest = null);
        /// <summary>
        /// Update a product by EB Id
        /// </summary>
        /// <remarks>
        /// Updates the details of a product by its Ebucation Brands Id
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="contentType">The Content type.</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <param name="product">The updated product object</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> UpdateProductByIdAsync (string authorization, string contentType, string ebProductId, Product product);

        /// <summary>
        /// Update a product by EB Id
        /// </summary>
        /// <remarks>
        /// Updates the details of a product by its Ebucation Brands Id
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="contentType">The Content type.</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <param name="product">The updated product object</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> UpdateProductByIdAsyncWithHttpInfo (string authorization, string contentType, string ebProductId, Product product);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductApi : IProductApi
    {
        private CB.IntegrationService.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = CB.IntegrationService.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CB.IntegrationService.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CB.IntegrationService.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// De-register the product De-register the product by its Ebucation Brands Id
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns></returns>
        public void DeRegisterProductById (string ebProductId)
        {
             DeRegisterProductByIdWithHttpInfo(ebProductId);
        }

        /// <summary>
        /// De-register the product De-register the product by its Ebucation Brands Id
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeRegisterProductByIdWithHttpInfo (string ebProductId)
        {
            // verify the required parameter 'ebProductId' is set
            if (ebProductId == null)
                throw new ApiException(400, "Missing required parameter 'ebProductId' when calling ProductApi->DeRegisterProductById");

            var localVarPath = "/products/{ebProductId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ebProductId != null) localVarPathParams.Add("ebProductId", Configuration.ApiClient.ParameterToString(ebProductId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeRegisterProductById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// De-register the product De-register the product by its Ebucation Brands Id
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeRegisterProductByIdAsync (string ebProductId)
        {
             await DeRegisterProductByIdAsyncWithHttpInfo(ebProductId);

        }

        /// <summary>
        /// De-register the product De-register the product by its Ebucation Brands Id
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeRegisterProductByIdAsyncWithHttpInfo (string ebProductId)
        {
            // verify the required parameter 'ebProductId' is set
            if (ebProductId == null)
                throw new ApiException(400, "Missing required parameter 'ebProductId' when calling ProductApi->DeRegisterProductById");

            var localVarPath = "/products/{ebProductId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ebProductId != null) localVarPathParams.Add("ebProductId", Configuration.ApiClient.ParameterToString(ebProductId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeRegisterProductById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a product by EB Id Gets the details of a product by its Ebucation Brands Id
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns>Product</returns>
        public Product GetProductById (string authorization, string ebProductId)
        {
             ApiResponse<Product> localVarResponse = GetProductByIdWithHttpInfo(authorization, ebProductId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a product by EB Id Gets the details of a product by its Ebucation Brands Id
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > GetProductByIdWithHttpInfo (string authorization, string ebProductId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ProductApi->GetProductById");
            // verify the required parameter 'ebProductId' is set
            if (ebProductId == null)
                throw new ApiException(400, "Missing required parameter 'ebProductId' when calling ProductApi->GetProductById");

            var localVarPath = "/products/{ebProductId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ebProductId != null) localVarPathParams.Add("ebProductId", Configuration.ApiClient.ParameterToString(ebProductId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Get a product by EB Id Gets the details of a product by its Ebucation Brands Id
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> GetProductByIdAsync (string authorization, string ebProductId)
        {
             ApiResponse<Product> localVarResponse = await GetProductByIdAsyncWithHttpInfo(authorization, ebProductId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a product by EB Id Gets the details of a product by its Ebucation Brands Id
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> GetProductByIdAsyncWithHttpInfo (string authorization, string ebProductId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ProductApi->GetProductById");
            // verify the required parameter 'ebProductId' is set
            if (ebProductId == null)
                throw new ApiException(400, "Missing required parameter 'ebProductId' when calling ProductApi->GetProductById");

            var localVarPath = "/products/{ebProductId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ebProductId != null) localVarPathParams.Add("ebProductId", Configuration.ApiClient.ParameterToString(ebProductId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Get list of EB products 
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <returns>List&lt;Product&gt;</returns>
        public List<Product> GetProducts (string authorization)
        {
             ApiResponse<List<Product>> localVarResponse = GetProductsWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of EB products 
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public ApiResponse< List<Product> > GetProductsWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ProductApi->GetProducts");

            var localVarPath = "/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProducts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Product>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        /// Get list of EB products 
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>> GetProductsAsync (string authorization)
        {
             ApiResponse<List<Product>> localVarResponse = await GetProductsAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of EB products 
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Product>>> GetProductsAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ProductApi->GetProducts");

            var localVarPath = "/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProducts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Product>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        /// Register a new product 
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="registerProductRequest"> (optional)</param>
        /// <returns>RegisterProductResponse</returns>
        public RegisterProductResponse PostProduct (string authorization, Product registerProductRequest = null)
        {
             ApiResponse<RegisterProductResponse> localVarResponse = PostProductWithHttpInfo(authorization, registerProductRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register a new product 
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="registerProductRequest"> (optional)</param>
        /// <returns>ApiResponse of RegisterProductResponse</returns>
        public ApiResponse< RegisterProductResponse > PostProductWithHttpInfo (string authorization, Product registerProductRequest = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ProductApi->PostProduct");

            var localVarPath = "/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (registerProductRequest != null && registerProductRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(registerProductRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = registerProductRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterProductResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterProductResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterProductResponse)));
        }

        /// <summary>
        /// Register a new product 
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="registerProductRequest"> (optional)</param>
        /// <returns>Task of RegisterProductResponse</returns>
        public async System.Threading.Tasks.Task<RegisterProductResponse> PostProductAsync (string authorization, Product registerProductRequest = null)
        {
             ApiResponse<RegisterProductResponse> localVarResponse = await PostProductAsyncWithHttpInfo(authorization, registerProductRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register a new product 
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="registerProductRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (RegisterProductResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegisterProductResponse>> PostProductAsyncWithHttpInfo (string authorization, Product registerProductRequest = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ProductApi->PostProduct");

            var localVarPath = "/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (registerProductRequest != null && registerProductRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(registerProductRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = registerProductRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterProductResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterProductResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterProductResponse)));
        }

        /// <summary>
        /// Update a product by EB Id Updates the details of a product by its Ebucation Brands Id
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="contentType">The Content type.</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <param name="product">The updated product object</param>
        /// <returns>Product</returns>
        public Product UpdateProductById (string authorization, string contentType, string ebProductId, Product product)
        {
             ApiResponse<Product> localVarResponse = UpdateProductByIdWithHttpInfo(authorization, contentType, ebProductId, product);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a product by EB Id Updates the details of a product by its Ebucation Brands Id
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="contentType">The Content type.</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <param name="product">The updated product object</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > UpdateProductByIdWithHttpInfo (string authorization, string contentType, string ebProductId, Product product)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ProductApi->UpdateProductById");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ProductApi->UpdateProductById");
            // verify the required parameter 'ebProductId' is set
            if (ebProductId == null)
                throw new ApiException(400, "Missing required parameter 'ebProductId' when calling ProductApi->UpdateProductById");
            // verify the required parameter 'product' is set
            if (product == null)
                throw new ApiException(400, "Missing required parameter 'product' when calling ProductApi->UpdateProductById");

            var localVarPath = "/products/{ebProductId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ebProductId != null) localVarPathParams.Add("ebProductId", Configuration.ApiClient.ParameterToString(ebProductId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (product != null && product.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(product); // http body (model) parameter
            }
            else
            {
                localVarPostBody = product; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProductById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Update a product by EB Id Updates the details of a product by its Ebucation Brands Id
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="contentType">The Content type.</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <param name="product">The updated product object</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> UpdateProductByIdAsync (string authorization, string contentType, string ebProductId, Product product)
        {
             ApiResponse<Product> localVarResponse = await UpdateProductByIdAsyncWithHttpInfo(authorization, contentType, ebProductId, product);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a product by EB Id Updates the details of a product by its Ebucation Brands Id
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Authorization header for authentication.  The syntax is &lt;b&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;&lt;/b&gt;;  &lt;i&gt;where type&#x3D;&lt;b&gt;Basic&lt;/b&gt; and credentials&#x3D; base64 encoding of &lt;b&gt;&amp;lt;username&amp;gt;:&amp;lt;secretKey&amp;gt;&lt;/b&gt;&lt;/i&gt;</param>
        /// <param name="contentType">The Content type.</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <param name="product">The updated product object</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> UpdateProductByIdAsyncWithHttpInfo (string authorization, string contentType, string ebProductId, Product product)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ProductApi->UpdateProductById");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ProductApi->UpdateProductById");
            // verify the required parameter 'ebProductId' is set
            if (ebProductId == null)
                throw new ApiException(400, "Missing required parameter 'ebProductId' when calling ProductApi->UpdateProductById");
            // verify the required parameter 'product' is set
            if (product == null)
                throw new ApiException(400, "Missing required parameter 'product' when calling ProductApi->UpdateProductById");

            var localVarPath = "/products/{ebProductId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ebProductId != null) localVarPathParams.Add("ebProductId", Configuration.ApiClient.ParameterToString(ebProductId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (product != null && product.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(product); // http body (model) parameter
            }
            else
            {
                localVarPostBody = product; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProductById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

    }
}
