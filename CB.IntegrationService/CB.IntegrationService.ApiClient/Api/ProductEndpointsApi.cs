/* 
 * Education Brands Integration Service APIs
 *
 * The integration framework is an attempt to define a standard and simple socket each brand can plug in to interact with other EB products. It defines what each product needs to do to integrate with other products. It has a set of API to interact with other products and what each product should implement to receive communication from other products. This is an API specification detailing the APIs for Education Brands IntegrationService.  Most of these APIs will be implemented in EBIS.  The APIs in the 'Product Endpoints' section has to be implemented by each of the Products.  <b>NOTE - <i>This specification is still in early development stage and is subject to change without notice.</i></b> 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sobin@schoolspeak.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using CB.IntegrationService.ApiClient.Client;
using CB.IntegrationService.ApiModels;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace CB.IntegrationService.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductEndpointsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Product endpoint to receive notification acknowledgement from EBIS
        /// </summary>
        /// <remarks>
        /// Acnowledge API facilitate the product to keep track of the request and its status whether it has delivered to the end product successfully or not
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ackNotification"> (optional)</param>
        /// <returns></returns>
        void AckNotificationRequest (AckNotification ackNotification = null);

        /// <summary>
        /// Product endpoint to receive notification acknowledgement from EBIS
        /// </summary>
        /// <remarks>
        /// Acnowledge API facilitate the product to keep track of the request and its status whether it has delivered to the end product successfully or not
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ackNotification"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AckNotificationRequestWithHttpInfo (AckNotification ackNotification = null);
        /// <summary>
        /// Product endpoint to receive Error notifications from EBIS
        /// </summary>
        /// <remarks>
        /// The Error API is can be used by the product to keep track of the errors and abnormalities occured while processing the request.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorNotification"> (optional)</param>
        /// <returns></returns>
        void ErrorNotificationRequest (ErrorNotificationRequest errorNotification = null);

        /// <summary>
        /// Product endpoint to receive Error notifications from EBIS
        /// </summary>
        /// <remarks>
        /// The Error API is can be used by the product to keep track of the errors and abnormalities occured while processing the request.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorNotification"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ErrorNotificationRequestWithHttpInfo (ErrorNotificationRequest errorNotification = null);
        /// <summary>
        /// Product endpoint to receive Query requests from EBIS
        /// </summary>
        /// <remarks>
        /// Query APIs are useful when a product wants to proactively get some information from another product. This is often the case when a system wants to request current information in another system. Using these APIs enables you to exchange data synchronously.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getQueryRequest"> (optional)</param>
        /// <returns>GetQueryResponse</returns>
        GetQueryResponse GetDataQueryRequest (GetQueryRequest getQueryRequest = null);

        /// <summary>
        /// Product endpoint to receive Query requests from EBIS
        /// </summary>
        /// <remarks>
        /// Query APIs are useful when a product wants to proactively get some information from another product. This is often the case when a system wants to request current information in another system. Using these APIs enables you to exchange data synchronously.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getQueryRequest"> (optional)</param>
        /// <returns>ApiResponse of GetQueryResponse</returns>
        ApiResponse<GetQueryResponse> GetDataQueryRequestWithHttpInfo (GetQueryRequest getQueryRequest = null);
        /// <summary>
        /// Product endpoint to receive the notifications for an event from EBIS
        /// </summary>
        /// <remarks>
        /// The notification endpoint will be invoked by EBIS to facilitate Notification API. THis is the endpoint that EBIS will call when it has to notify a product about any event that has been published.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productNotificationRequest"> (optional)</param>
        /// <returns></returns>
        void ProductNotification (ProductNotificationRequest productNotificationRequest = null);

        /// <summary>
        /// Product endpoint to receive the notifications for an event from EBIS
        /// </summary>
        /// <remarks>
        /// The notification endpoint will be invoked by EBIS to facilitate Notification API. THis is the endpoint that EBIS will call when it has to notify a product about any event that has been published.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productNotificationRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProductNotificationWithHttpInfo (ProductNotificationRequest productNotificationRequest = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Product endpoint to receive notification acknowledgement from EBIS
        /// </summary>
        /// <remarks>
        /// Acnowledge API facilitate the product to keep track of the request and its status whether it has delivered to the end product successfully or not
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ackNotification"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AckNotificationRequestAsync (AckNotification ackNotification = null);

        /// <summary>
        /// Product endpoint to receive notification acknowledgement from EBIS
        /// </summary>
        /// <remarks>
        /// Acnowledge API facilitate the product to keep track of the request and its status whether it has delivered to the end product successfully or not
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ackNotification"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AckNotificationRequestAsyncWithHttpInfo (AckNotification ackNotification = null);
        /// <summary>
        /// Product endpoint to receive Error notifications from EBIS
        /// </summary>
        /// <remarks>
        /// The Error API is can be used by the product to keep track of the errors and abnormalities occured while processing the request.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorNotification"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ErrorNotificationRequestAsync (ErrorNotificationRequest errorNotification = null);

        /// <summary>
        /// Product endpoint to receive Error notifications from EBIS
        /// </summary>
        /// <remarks>
        /// The Error API is can be used by the product to keep track of the errors and abnormalities occured while processing the request.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorNotification"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ErrorNotificationRequestAsyncWithHttpInfo (ErrorNotificationRequest errorNotification = null);
        /// <summary>
        /// Product endpoint to receive Query requests from EBIS
        /// </summary>
        /// <remarks>
        /// Query APIs are useful when a product wants to proactively get some information from another product. This is often the case when a system wants to request current information in another system. Using these APIs enables you to exchange data synchronously.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getQueryRequest"> (optional)</param>
        /// <returns>Task of GetQueryResponse</returns>
        System.Threading.Tasks.Task<GetQueryResponse> GetDataQueryRequestAsync (GetQueryRequest getQueryRequest = null);

        /// <summary>
        /// Product endpoint to receive Query requests from EBIS
        /// </summary>
        /// <remarks>
        /// Query APIs are useful when a product wants to proactively get some information from another product. This is often the case when a system wants to request current information in another system. Using these APIs enables you to exchange data synchronously.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getQueryRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (GetQueryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetQueryResponse>> GetDataQueryRequestAsyncWithHttpInfo (GetQueryRequest getQueryRequest = null);
        /// <summary>
        /// Product endpoint to receive the notifications for an event from EBIS
        /// </summary>
        /// <remarks>
        /// The notification endpoint will be invoked by EBIS to facilitate Notification API. THis is the endpoint that EBIS will call when it has to notify a product about any event that has been published.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productNotificationRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProductNotificationAsync (ProductNotificationRequest productNotificationRequest = null);

        /// <summary>
        /// Product endpoint to receive the notifications for an event from EBIS
        /// </summary>
        /// <remarks>
        /// The notification endpoint will be invoked by EBIS to facilitate Notification API. THis is the endpoint that EBIS will call when it has to notify a product about any event that has been published.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productNotificationRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductNotificationAsyncWithHttpInfo (ProductNotificationRequest productNotificationRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductEndpointsApi : IProductEndpointsApi
    {
        private CB.IntegrationService.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductEndpointsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductEndpointsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = CB.IntegrationService.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductEndpointsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductEndpointsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CB.IntegrationService.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CB.IntegrationService.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Product endpoint to receive notification acknowledgement from EBIS Acnowledge API facilitate the product to keep track of the request and its status whether it has delivered to the end product successfully or not
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ackNotification"> (optional)</param>
        /// <returns></returns>
        public void AckNotificationRequest (AckNotification ackNotification = null)
        {
             AckNotificationRequestWithHttpInfo(ackNotification);
        }

        /// <summary>
        /// Product endpoint to receive notification acknowledgement from EBIS Acnowledge API facilitate the product to keep track of the request and its status whether it has delivered to the end product successfully or not
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ackNotification"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AckNotificationRequestWithHttpInfo (AckNotification ackNotification = null)
        {

            var localVarPath = "/productBaseUrl/acknowledgeNotification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ackNotification != null && ackNotification.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ackNotification); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ackNotification; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AckNotificationRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Product endpoint to receive notification acknowledgement from EBIS Acnowledge API facilitate the product to keep track of the request and its status whether it has delivered to the end product successfully or not
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ackNotification"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AckNotificationRequestAsync (AckNotification ackNotification = null)
        {
             await AckNotificationRequestAsyncWithHttpInfo(ackNotification);

        }

        /// <summary>
        /// Product endpoint to receive notification acknowledgement from EBIS Acnowledge API facilitate the product to keep track of the request and its status whether it has delivered to the end product successfully or not
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ackNotification"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AckNotificationRequestAsyncWithHttpInfo (AckNotification ackNotification = null)
        {

            var localVarPath = "/productBaseUrl/acknowledgeNotification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ackNotification != null && ackNotification.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ackNotification); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ackNotification; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AckNotificationRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Product endpoint to receive Error notifications from EBIS The Error API is can be used by the product to keep track of the errors and abnormalities occured while processing the request.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorNotification"> (optional)</param>
        /// <returns></returns>
        public void ErrorNotificationRequest (ErrorNotificationRequest errorNotification = null)
        {
             ErrorNotificationRequestWithHttpInfo(errorNotification);
        }

        /// <summary>
        /// Product endpoint to receive Error notifications from EBIS The Error API is can be used by the product to keep track of the errors and abnormalities occured while processing the request.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorNotification"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ErrorNotificationRequestWithHttpInfo (ErrorNotificationRequest errorNotification = null)
        {

            var localVarPath = "/productBaseUrl/errorNotification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorNotification != null && errorNotification.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(errorNotification); // http body (model) parameter
            }
            else
            {
                localVarPostBody = errorNotification; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorNotificationRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Product endpoint to receive Error notifications from EBIS The Error API is can be used by the product to keep track of the errors and abnormalities occured while processing the request.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorNotification"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ErrorNotificationRequestAsync (ErrorNotificationRequest errorNotification = null)
        {
             await ErrorNotificationRequestAsyncWithHttpInfo(errorNotification);

        }

        /// <summary>
        /// Product endpoint to receive Error notifications from EBIS The Error API is can be used by the product to keep track of the errors and abnormalities occured while processing the request.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="errorNotification"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ErrorNotificationRequestAsyncWithHttpInfo (ErrorNotificationRequest errorNotification = null)
        {

            var localVarPath = "/productBaseUrl/errorNotification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (errorNotification != null && errorNotification.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(errorNotification); // http body (model) parameter
            }
            else
            {
                localVarPostBody = errorNotification; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorNotificationRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Product endpoint to receive Query requests from EBIS Query APIs are useful when a product wants to proactively get some information from another product. This is often the case when a system wants to request current information in another system. Using these APIs enables you to exchange data synchronously.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getQueryRequest"> (optional)</param>
        /// <returns>GetQueryResponse</returns>
        public GetQueryResponse GetDataQueryRequest (GetQueryRequest getQueryRequest = null)
        {
             ApiResponse<GetQueryResponse> localVarResponse = GetDataQueryRequestWithHttpInfo(getQueryRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Product endpoint to receive Query requests from EBIS Query APIs are useful when a product wants to proactively get some information from another product. This is often the case when a system wants to request current information in another system. Using these APIs enables you to exchange data synchronously.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getQueryRequest"> (optional)</param>
        /// <returns>ApiResponse of GetQueryResponse</returns>
        public ApiResponse< GetQueryResponse > GetDataQueryRequestWithHttpInfo (GetQueryRequest getQueryRequest = null)
        {

            var localVarPath = "/productBaseUrl/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (getQueryRequest != null && getQueryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(getQueryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getQueryRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataQueryRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetQueryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetQueryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetQueryResponse)));
        }

        /// <summary>
        /// Product endpoint to receive Query requests from EBIS Query APIs are useful when a product wants to proactively get some information from another product. This is often the case when a system wants to request current information in another system. Using these APIs enables you to exchange data synchronously.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getQueryRequest"> (optional)</param>
        /// <returns>Task of GetQueryResponse</returns>
        public async System.Threading.Tasks.Task<GetQueryResponse> GetDataQueryRequestAsync (GetQueryRequest getQueryRequest = null)
        {
             ApiResponse<GetQueryResponse> localVarResponse = await GetDataQueryRequestAsyncWithHttpInfo(getQueryRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Product endpoint to receive Query requests from EBIS Query APIs are useful when a product wants to proactively get some information from another product. This is often the case when a system wants to request current information in another system. Using these APIs enables you to exchange data synchronously.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getQueryRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (GetQueryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetQueryResponse>> GetDataQueryRequestAsyncWithHttpInfo (GetQueryRequest getQueryRequest = null)
        {

            var localVarPath = "/productBaseUrl/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (getQueryRequest != null && getQueryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(getQueryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getQueryRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataQueryRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetQueryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetQueryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetQueryResponse)));
        }

        /// <summary>
        /// Product endpoint to receive the notifications for an event from EBIS The notification endpoint will be invoked by EBIS to facilitate Notification API. THis is the endpoint that EBIS will call when it has to notify a product about any event that has been published.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productNotificationRequest"> (optional)</param>
        /// <returns></returns>
        public void ProductNotification (ProductNotificationRequest productNotificationRequest = null)
        {
             ProductNotificationWithHttpInfo(productNotificationRequest);
        }

        /// <summary>
        /// Product endpoint to receive the notifications for an event from EBIS The notification endpoint will be invoked by EBIS to facilitate Notification API. THis is the endpoint that EBIS will call when it has to notify a product about any event that has been published.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productNotificationRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProductNotificationWithHttpInfo (ProductNotificationRequest productNotificationRequest = null)
        {

            var localVarPath = "/productBaseUrl/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productNotificationRequest != null && productNotificationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(productNotificationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = productNotificationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Product endpoint to receive the notifications for an event from EBIS The notification endpoint will be invoked by EBIS to facilitate Notification API. THis is the endpoint that EBIS will call when it has to notify a product about any event that has been published.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productNotificationRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProductNotificationAsync (ProductNotificationRequest productNotificationRequest = null)
        {
             await ProductNotificationAsyncWithHttpInfo(productNotificationRequest);

        }

        /// <summary>
        /// Product endpoint to receive the notifications for an event from EBIS The notification endpoint will be invoked by EBIS to facilitate Notification API. THis is the endpoint that EBIS will call when it has to notify a product about any event that has been published.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productNotificationRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProductNotificationAsyncWithHttpInfo (ProductNotificationRequest productNotificationRequest = null)
        {

            var localVarPath = "/productBaseUrl/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productNotificationRequest != null && productNotificationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(productNotificationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = productNotificationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
