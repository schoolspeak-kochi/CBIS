/* 
 * Education Brands Integration Service APIs
 *
 * The integration framework is an attempt to define a standard and simple socket each brand can plug in to interact with other EB products. It defines what each product needs to do to integrate with other products. It has a set of API to interact with other products and what each product should implement to receive communication from other products. This is an API specification detailing the APIs for Education Brands IntegrationService.  Most of these APIs will be implemented in EBIS.  The APIs in the 'Product Endpoints' section has to be implemented by each of the Products.  <b>NOTE - <i>This specification is still in early development stage and is subject to change without notice.</i></b> 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sobin@schoolspeak.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using CB.IntegrationService.ApiClient.Client;
using CB.IntegrationService.ApiModels;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace CB.IntegrationService.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstitutionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Disable Integration for product
        /// </summary>
        /// <remarks>
        /// API for an institution to disable integration for its product
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebInstitutionId">The Education brands institution id</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns></returns>
        void DisableProductInstitutionIntegration (string ebInstitutionId, string ebProductId);

        /// <summary>
        /// Disable Integration for product
        /// </summary>
        /// <remarks>
        /// API for an institution to disable integration for its product
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebInstitutionId">The Education brands institution id</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DisableProductInstitutionIntegrationWithHttpInfo (string ebInstitutionId, string ebProductId);
        /// <summary>
        /// Get Services
        /// </summary>
        /// <remarks>
        /// Gets a list of all services offered by different products for the specified institution
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebInstitutionId">The Education brands institution id</param>
        /// <returns>GetServiceResponse</returns>
        GetServiceResponse GetServicesRequest (string ebInstitutionId);

        /// <summary>
        /// Get Services
        /// </summary>
        /// <remarks>
        /// Gets a list of all services offered by different products for the specified institution
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebInstitutionId">The Education brands institution id</param>
        /// <returns>ApiResponse of GetServiceResponse</returns>
        ApiResponse<GetServiceResponse> GetServicesRequestWithHttpInfo (string ebInstitutionId);
        /// <summary>
        /// Register a new Institution for Integration
        /// </summary>
        /// <remarks>
        /// Registeres a new institution for Integration. THis must be done before using the services of EBIS.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerInstitutionRequest"> (optional)</param>
        /// <returns>RegisterInstitutionResponse</returns>
        RegisterInstitutionResponse RegisterInstitution (RegisterInstitutionRequest registerInstitutionRequest = null);

        /// <summary>
        /// Register a new Institution for Integration
        /// </summary>
        /// <remarks>
        /// Registeres a new institution for Integration. THis must be done before using the services of EBIS.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerInstitutionRequest"> (optional)</param>
        /// <returns>ApiResponse of RegisterInstitutionResponse</returns>
        ApiResponse<RegisterInstitutionResponse> RegisterInstitutionWithHttpInfo (RegisterInstitutionRequest registerInstitutionRequest = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Disable Integration for product
        /// </summary>
        /// <remarks>
        /// API for an institution to disable integration for its product
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebInstitutionId">The Education brands institution id</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DisableProductInstitutionIntegrationAsync (string ebInstitutionId, string ebProductId);

        /// <summary>
        /// Disable Integration for product
        /// </summary>
        /// <remarks>
        /// API for an institution to disable integration for its product
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebInstitutionId">The Education brands institution id</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisableProductInstitutionIntegrationAsyncWithHttpInfo (string ebInstitutionId, string ebProductId);
        /// <summary>
        /// Get Services
        /// </summary>
        /// <remarks>
        /// Gets a list of all services offered by different products for the specified institution
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebInstitutionId">The Education brands institution id</param>
        /// <returns>Task of GetServiceResponse</returns>
        System.Threading.Tasks.Task<GetServiceResponse> GetServicesRequestAsync (string ebInstitutionId);

        /// <summary>
        /// Get Services
        /// </summary>
        /// <remarks>
        /// Gets a list of all services offered by different products for the specified institution
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebInstitutionId">The Education brands institution id</param>
        /// <returns>Task of ApiResponse (GetServiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetServiceResponse>> GetServicesRequestAsyncWithHttpInfo (string ebInstitutionId);
        /// <summary>
        /// Register a new Institution for Integration
        /// </summary>
        /// <remarks>
        /// Registeres a new institution for Integration. THis must be done before using the services of EBIS.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerInstitutionRequest"> (optional)</param>
        /// <returns>Task of RegisterInstitutionResponse</returns>
        System.Threading.Tasks.Task<RegisterInstitutionResponse> RegisterInstitutionAsync (RegisterInstitutionRequest registerInstitutionRequest = null);

        /// <summary>
        /// Register a new Institution for Integration
        /// </summary>
        /// <remarks>
        /// Registeres a new institution for Integration. THis must be done before using the services of EBIS.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerInstitutionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (RegisterInstitutionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegisterInstitutionResponse>> RegisterInstitutionAsyncWithHttpInfo (RegisterInstitutionRequest registerInstitutionRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InstitutionApi : IInstitutionApi
    {
        private CB.IntegrationService.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InstitutionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstitutionApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = CB.IntegrationService.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstitutionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InstitutionApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CB.IntegrationService.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CB.IntegrationService.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Disable Integration for product API for an institution to disable integration for its product
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebInstitutionId">The Education brands institution id</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns></returns>
        public void DisableProductInstitutionIntegration (string ebInstitutionId, string ebProductId)
        {
             DisableProductInstitutionIntegrationWithHttpInfo(ebInstitutionId, ebProductId);
        }

        /// <summary>
        /// Disable Integration for product API for an institution to disable integration for its product
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebInstitutionId">The Education brands institution id</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DisableProductInstitutionIntegrationWithHttpInfo (string ebInstitutionId, string ebProductId)
        {
            // verify the required parameter 'ebInstitutionId' is set
            if (ebInstitutionId == null)
                throw new ApiException(400, "Missing required parameter 'ebInstitutionId' when calling InstitutionApi->DisableProductInstitutionIntegration");
            // verify the required parameter 'ebProductId' is set
            if (ebProductId == null)
                throw new ApiException(400, "Missing required parameter 'ebProductId' when calling InstitutionApi->DisableProductInstitutionIntegration");

            var localVarPath = "/institutions/{ebInstitutionId}/products/{ebProductId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ebInstitutionId != null) localVarPathParams.Add("ebInstitutionId", Configuration.ApiClient.ParameterToString(ebInstitutionId)); // path parameter
            if (ebProductId != null) localVarPathParams.Add("ebProductId", Configuration.ApiClient.ParameterToString(ebProductId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisableProductInstitutionIntegration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Disable Integration for product API for an institution to disable integration for its product
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebInstitutionId">The Education brands institution id</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DisableProductInstitutionIntegrationAsync (string ebInstitutionId, string ebProductId)
        {
             await DisableProductInstitutionIntegrationAsyncWithHttpInfo(ebInstitutionId, ebProductId);

        }

        /// <summary>
        /// Disable Integration for product API for an institution to disable integration for its product
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebInstitutionId">The Education brands institution id</param>
        /// <param name="ebProductId">The Education brands product id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DisableProductInstitutionIntegrationAsyncWithHttpInfo (string ebInstitutionId, string ebProductId)
        {
            // verify the required parameter 'ebInstitutionId' is set
            if (ebInstitutionId == null)
                throw new ApiException(400, "Missing required parameter 'ebInstitutionId' when calling InstitutionApi->DisableProductInstitutionIntegration");
            // verify the required parameter 'ebProductId' is set
            if (ebProductId == null)
                throw new ApiException(400, "Missing required parameter 'ebProductId' when calling InstitutionApi->DisableProductInstitutionIntegration");

            var localVarPath = "/institutions/{ebInstitutionId}/products/{ebProductId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ebInstitutionId != null) localVarPathParams.Add("ebInstitutionId", Configuration.ApiClient.ParameterToString(ebInstitutionId)); // path parameter
            if (ebProductId != null) localVarPathParams.Add("ebProductId", Configuration.ApiClient.ParameterToString(ebProductId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisableProductInstitutionIntegration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Services Gets a list of all services offered by different products for the specified institution
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebInstitutionId">The Education brands institution id</param>
        /// <returns>GetServiceResponse</returns>
        public GetServiceResponse GetServicesRequest (string ebInstitutionId)
        {
             ApiResponse<GetServiceResponse> localVarResponse = GetServicesRequestWithHttpInfo(ebInstitutionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Services Gets a list of all services offered by different products for the specified institution
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebInstitutionId">The Education brands institution id</param>
        /// <returns>ApiResponse of GetServiceResponse</returns>
        public ApiResponse< GetServiceResponse > GetServicesRequestWithHttpInfo (string ebInstitutionId)
        {
            // verify the required parameter 'ebInstitutionId' is set
            if (ebInstitutionId == null)
                throw new ApiException(400, "Missing required parameter 'ebInstitutionId' when calling InstitutionApi->GetServicesRequest");

            var localVarPath = "/institutions/{ebInstitutionId}/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ebInstitutionId != null) localVarPathParams.Add("ebInstitutionId", Configuration.ApiClient.ParameterToString(ebInstitutionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServicesRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetServiceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetServiceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetServiceResponse)));
        }

        /// <summary>
        /// Get Services Gets a list of all services offered by different products for the specified institution
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebInstitutionId">The Education brands institution id</param>
        /// <returns>Task of GetServiceResponse</returns>
        public async System.Threading.Tasks.Task<GetServiceResponse> GetServicesRequestAsync (string ebInstitutionId)
        {
             ApiResponse<GetServiceResponse> localVarResponse = await GetServicesRequestAsyncWithHttpInfo(ebInstitutionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Services Gets a list of all services offered by different products for the specified institution
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ebInstitutionId">The Education brands institution id</param>
        /// <returns>Task of ApiResponse (GetServiceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetServiceResponse>> GetServicesRequestAsyncWithHttpInfo (string ebInstitutionId)
        {
            // verify the required parameter 'ebInstitutionId' is set
            if (ebInstitutionId == null)
                throw new ApiException(400, "Missing required parameter 'ebInstitutionId' when calling InstitutionApi->GetServicesRequest");

            var localVarPath = "/institutions/{ebInstitutionId}/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ebInstitutionId != null) localVarPathParams.Add("ebInstitutionId", Configuration.ApiClient.ParameterToString(ebInstitutionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServicesRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetServiceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetServiceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetServiceResponse)));
        }

        /// <summary>
        /// Register a new Institution for Integration Registeres a new institution for Integration. THis must be done before using the services of EBIS.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerInstitutionRequest"> (optional)</param>
        /// <returns>RegisterInstitutionResponse</returns>
        public RegisterInstitutionResponse RegisterInstitution (RegisterInstitutionRequest registerInstitutionRequest = null)
        {
             ApiResponse<RegisterInstitutionResponse> localVarResponse = RegisterInstitutionWithHttpInfo(registerInstitutionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register a new Institution for Integration Registeres a new institution for Integration. THis must be done before using the services of EBIS.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerInstitutionRequest"> (optional)</param>
        /// <returns>ApiResponse of RegisterInstitutionResponse</returns>
        public ApiResponse< RegisterInstitutionResponse > RegisterInstitutionWithHttpInfo (RegisterInstitutionRequest registerInstitutionRequest = null)
        {

            var localVarPath = "/institutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registerInstitutionRequest != null && registerInstitutionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(registerInstitutionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = registerInstitutionRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterInstitution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterInstitutionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterInstitutionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterInstitutionResponse)));
        }

        /// <summary>
        /// Register a new Institution for Integration Registeres a new institution for Integration. THis must be done before using the services of EBIS.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerInstitutionRequest"> (optional)</param>
        /// <returns>Task of RegisterInstitutionResponse</returns>
        public async System.Threading.Tasks.Task<RegisterInstitutionResponse> RegisterInstitutionAsync (RegisterInstitutionRequest registerInstitutionRequest = null)
        {
             ApiResponse<RegisterInstitutionResponse> localVarResponse = await RegisterInstitutionAsyncWithHttpInfo(registerInstitutionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register a new Institution for Integration Registeres a new institution for Integration. THis must be done before using the services of EBIS.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerInstitutionRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (RegisterInstitutionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegisterInstitutionResponse>> RegisterInstitutionAsyncWithHttpInfo (RegisterInstitutionRequest registerInstitutionRequest = null)
        {

            var localVarPath = "/institutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registerInstitutionRequest != null && registerInstitutionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(registerInstitutionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = registerInstitutionRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterInstitution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisterInstitutionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegisterInstitutionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisterInstitutionResponse)));
        }

    }
}
