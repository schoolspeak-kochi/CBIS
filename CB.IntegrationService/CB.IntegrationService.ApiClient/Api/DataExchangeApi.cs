/* 
 * Education Brands Integration Service APIs
 *
 * The integration framework is an attempt to define a standard and simple socket each brand can plug in to interact with other EB products. It defines what each product needs to do to integrate with other products. It has a set of API to interact with other products and what each product should implement to receive communication from other products. This is an API specification detailing the APIs for Education Brands IntegrationService.  Most of these APIs will be implemented in EBIS.  The APIs in the 'Product Endpoints' section has to be implemented by each of the Products.  <b>NOTE - <i>This specification is still in early development stage and is subject to change without notice.</i></b> 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sobin@schoolspeak.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using CB.IntegrationService.ApiClient.Client;
using CB.IntegrationService.ApiModels;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace CB.IntegrationService.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataExchangeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Query for data
        /// </summary>
        /// <remarks>
        /// The Query API will allow a user to query data from services(like admissions, enrollment etc) offered by EB products. It also provides means to retrieve information of various types including member (student, parent, staff), household, admission, enrollment etc
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getQueryRequest"> (optional)</param>
        /// <returns>GetQueryResponse</returns>
        GetQueryResponse GetQueryRequest (GetQueryRequest getQueryRequest = null);

        /// <summary>
        /// Query for data
        /// </summary>
        /// <remarks>
        /// The Query API will allow a user to query data from services(like admissions, enrollment etc) offered by EB products. It also provides means to retrieve information of various types including member (student, parent, staff), household, admission, enrollment etc
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getQueryRequest"> (optional)</param>
        /// <returns>ApiResponse of GetQueryResponse</returns>
        ApiResponse<GetQueryResponse> GetQueryRequestWithHttpInfo (GetQueryRequest getQueryRequest = null);
        /// <summary>
        /// Acknowledge an event notification.
        /// </summary>
        /// <remarks>
        /// Acknowledge a notification for an event. A product that has received a notification can send an acknowledgement to the EBIS and EBis willcacknowledge  the original publisher with a status and message. The publisher will use the event token to identify the acknowledgement was against which publish.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationAcknowledgeRequest"> (optional)</param>
        /// <returns></returns>
        void NotificationAcknowledge (NotificationAcknowledgeRequest notificationAcknowledgeRequest = null);

        /// <summary>
        /// Acknowledge an event notification.
        /// </summary>
        /// <remarks>
        /// Acknowledge a notification for an event. A product that has received a notification can send an acknowledgement to the EBIS and EBis willcacknowledge  the original publisher with a status and message. The publisher will use the event token to identify the acknowledgement was against which publish.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationAcknowledgeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotificationAcknowledgeWithHttpInfo (NotificationAcknowledgeRequest notificationAcknowledgeRequest = null);
        /// <summary>
        /// Publish an event.
        /// </summary>
        /// <remarks>
        /// Publish a notification against a event. All those who have subscribed to the event will receive notification. The payload that is provided in the Publish will be passed on to each of the subscribers.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishEventRequest"> (optional)</param>
        /// <returns>PublishEventResponse</returns>
        PublishEventResponse PublishEvent (PublishEventRequest publishEventRequest = null);

        /// <summary>
        /// Publish an event.
        /// </summary>
        /// <remarks>
        /// Publish a notification against a event. All those who have subscribed to the event will receive notification. The payload that is provided in the Publish will be passed on to each of the subscribers.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishEventRequest"> (optional)</param>
        /// <returns>ApiResponse of PublishEventResponse</returns>
        ApiResponse<PublishEventResponse> PublishEventWithHttpInfo (PublishEventRequest publishEventRequest = null);
        /// <summary>
        /// Subscribe to a published event
        /// </summary>
        /// <remarks>
        /// Inorder to get the notifications for an event, the product has to subscribe for that event.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscribeEventRequest"> (optional)</param>
        /// <returns>SubscribeEventResponse</returns>
        SubscribeEventResponse SubscribeNotificationEvent (SubscribeEventRequest subscribeEventRequest = null);

        /// <summary>
        /// Subscribe to a published event
        /// </summary>
        /// <remarks>
        /// Inorder to get the notifications for an event, the product has to subscribe for that event.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscribeEventRequest"> (optional)</param>
        /// <returns>ApiResponse of SubscribeEventResponse</returns>
        ApiResponse<SubscribeEventResponse> SubscribeNotificationEventWithHttpInfo (SubscribeEventRequest subscribeEventRequest = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Query for data
        /// </summary>
        /// <remarks>
        /// The Query API will allow a user to query data from services(like admissions, enrollment etc) offered by EB products. It also provides means to retrieve information of various types including member (student, parent, staff), household, admission, enrollment etc
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getQueryRequest"> (optional)</param>
        /// <returns>Task of GetQueryResponse</returns>
        System.Threading.Tasks.Task<GetQueryResponse> GetQueryRequestAsync (GetQueryRequest getQueryRequest = null);

        /// <summary>
        /// Query for data
        /// </summary>
        /// <remarks>
        /// The Query API will allow a user to query data from services(like admissions, enrollment etc) offered by EB products. It also provides means to retrieve information of various types including member (student, parent, staff), household, admission, enrollment etc
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getQueryRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (GetQueryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetQueryResponse>> GetQueryRequestAsyncWithHttpInfo (GetQueryRequest getQueryRequest = null);
        /// <summary>
        /// Acknowledge an event notification.
        /// </summary>
        /// <remarks>
        /// Acknowledge a notification for an event. A product that has received a notification can send an acknowledgement to the EBIS and EBis willcacknowledge  the original publisher with a status and message. The publisher will use the event token to identify the acknowledgement was against which publish.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationAcknowledgeRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotificationAcknowledgeAsync (NotificationAcknowledgeRequest notificationAcknowledgeRequest = null);

        /// <summary>
        /// Acknowledge an event notification.
        /// </summary>
        /// <remarks>
        /// Acknowledge a notification for an event. A product that has received a notification can send an acknowledgement to the EBIS and EBis willcacknowledge  the original publisher with a status and message. The publisher will use the event token to identify the acknowledgement was against which publish.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationAcknowledgeRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotificationAcknowledgeAsyncWithHttpInfo (NotificationAcknowledgeRequest notificationAcknowledgeRequest = null);
        /// <summary>
        /// Publish an event.
        /// </summary>
        /// <remarks>
        /// Publish a notification against a event. All those who have subscribed to the event will receive notification. The payload that is provided in the Publish will be passed on to each of the subscribers.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishEventRequest"> (optional)</param>
        /// <returns>Task of PublishEventResponse</returns>
        System.Threading.Tasks.Task<PublishEventResponse> PublishEventAsync (PublishEventRequest publishEventRequest = null);

        /// <summary>
        /// Publish an event.
        /// </summary>
        /// <remarks>
        /// Publish a notification against a event. All those who have subscribed to the event will receive notification. The payload that is provided in the Publish will be passed on to each of the subscribers.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishEventRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (PublishEventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublishEventResponse>> PublishEventAsyncWithHttpInfo (PublishEventRequest publishEventRequest = null);
        /// <summary>
        /// Subscribe to a published event
        /// </summary>
        /// <remarks>
        /// Inorder to get the notifications for an event, the product has to subscribe for that event.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscribeEventRequest"> (optional)</param>
        /// <returns>Task of SubscribeEventResponse</returns>
        System.Threading.Tasks.Task<SubscribeEventResponse> SubscribeNotificationEventAsync (SubscribeEventRequest subscribeEventRequest = null);

        /// <summary>
        /// Subscribe to a published event
        /// </summary>
        /// <remarks>
        /// Inorder to get the notifications for an event, the product has to subscribe for that event.
        /// </remarks>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscribeEventRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (SubscribeEventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscribeEventResponse>> SubscribeNotificationEventAsyncWithHttpInfo (SubscribeEventRequest subscribeEventRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataExchangeApi : IDataExchangeApi
    {
        private CB.IntegrationService.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataExchangeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataExchangeApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = CB.IntegrationService.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataExchangeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataExchangeApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CB.IntegrationService.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CB.IntegrationService.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Query for data The Query API will allow a user to query data from services(like admissions, enrollment etc) offered by EB products. It also provides means to retrieve information of various types including member (student, parent, staff), household, admission, enrollment etc
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getQueryRequest"> (optional)</param>
        /// <returns>GetQueryResponse</returns>
        public GetQueryResponse GetQueryRequest (GetQueryRequest getQueryRequest = null)
        {
             ApiResponse<GetQueryResponse> localVarResponse = GetQueryRequestWithHttpInfo(getQueryRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query for data The Query API will allow a user to query data from services(like admissions, enrollment etc) offered by EB products. It also provides means to retrieve information of various types including member (student, parent, staff), household, admission, enrollment etc
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getQueryRequest"> (optional)</param>
        /// <returns>ApiResponse of GetQueryResponse</returns>
        public ApiResponse< GetQueryResponse > GetQueryRequestWithHttpInfo (GetQueryRequest getQueryRequest = null)
        {

            var localVarPath = "/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (getQueryRequest != null && getQueryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(getQueryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getQueryRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueryRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetQueryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetQueryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetQueryResponse)));
        }

        /// <summary>
        /// Query for data The Query API will allow a user to query data from services(like admissions, enrollment etc) offered by EB products. It also provides means to retrieve information of various types including member (student, parent, staff), household, admission, enrollment etc
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getQueryRequest"> (optional)</param>
        /// <returns>Task of GetQueryResponse</returns>
        public async System.Threading.Tasks.Task<GetQueryResponse> GetQueryRequestAsync (GetQueryRequest getQueryRequest = null)
        {
             ApiResponse<GetQueryResponse> localVarResponse = await GetQueryRequestAsyncWithHttpInfo(getQueryRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query for data The Query API will allow a user to query data from services(like admissions, enrollment etc) offered by EB products. It also provides means to retrieve information of various types including member (student, parent, staff), household, admission, enrollment etc
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getQueryRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (GetQueryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetQueryResponse>> GetQueryRequestAsyncWithHttpInfo (GetQueryRequest getQueryRequest = null)
        {

            var localVarPath = "/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (getQueryRequest != null && getQueryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(getQueryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getQueryRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueryRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetQueryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetQueryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetQueryResponse)));
        }

        /// <summary>
        /// Acknowledge an event notification. Acknowledge a notification for an event. A product that has received a notification can send an acknowledgement to the EBIS and EBis willcacknowledge  the original publisher with a status and message. The publisher will use the event token to identify the acknowledgement was against which publish.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationAcknowledgeRequest"> (optional)</param>
        /// <returns></returns>
        public void NotificationAcknowledge (NotificationAcknowledgeRequest notificationAcknowledgeRequest = null)
        {
             NotificationAcknowledgeWithHttpInfo(notificationAcknowledgeRequest);
        }

        /// <summary>
        /// Acknowledge an event notification. Acknowledge a notification for an event. A product that has received a notification can send an acknowledgement to the EBIS and EBis willcacknowledge  the original publisher with a status and message. The publisher will use the event token to identify the acknowledgement was against which publish.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationAcknowledgeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NotificationAcknowledgeWithHttpInfo (NotificationAcknowledgeRequest notificationAcknowledgeRequest = null)
        {

            var localVarPath = "/notifications/acknowledge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationAcknowledgeRequest != null && notificationAcknowledgeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(notificationAcknowledgeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationAcknowledgeRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationAcknowledge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Acknowledge an event notification. Acknowledge a notification for an event. A product that has received a notification can send an acknowledgement to the EBIS and EBis willcacknowledge  the original publisher with a status and message. The publisher will use the event token to identify the acknowledgement was against which publish.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationAcknowledgeRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotificationAcknowledgeAsync (NotificationAcknowledgeRequest notificationAcknowledgeRequest = null)
        {
             await NotificationAcknowledgeAsyncWithHttpInfo(notificationAcknowledgeRequest);

        }

        /// <summary>
        /// Acknowledge an event notification. Acknowledge a notification for an event. A product that has received a notification can send an acknowledgement to the EBIS and EBis willcacknowledge  the original publisher with a status and message. The publisher will use the event token to identify the acknowledgement was against which publish.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationAcknowledgeRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NotificationAcknowledgeAsyncWithHttpInfo (NotificationAcknowledgeRequest notificationAcknowledgeRequest = null)
        {

            var localVarPath = "/notifications/acknowledge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationAcknowledgeRequest != null && notificationAcknowledgeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(notificationAcknowledgeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationAcknowledgeRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationAcknowledge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Publish an event. Publish a notification against a event. All those who have subscribed to the event will receive notification. The payload that is provided in the Publish will be passed on to each of the subscribers.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishEventRequest"> (optional)</param>
        /// <returns>PublishEventResponse</returns>
        public PublishEventResponse PublishEvent (PublishEventRequest publishEventRequest = null)
        {
             ApiResponse<PublishEventResponse> localVarResponse = PublishEventWithHttpInfo(publishEventRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Publish an event. Publish a notification against a event. All those who have subscribed to the event will receive notification. The payload that is provided in the Publish will be passed on to each of the subscribers.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishEventRequest"> (optional)</param>
        /// <returns>ApiResponse of PublishEventResponse</returns>
        public ApiResponse< PublishEventResponse > PublishEventWithHttpInfo (PublishEventRequest publishEventRequest = null)
        {

            var localVarPath = "/notifications/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publishEventRequest != null && publishEventRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(publishEventRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = publishEventRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublishEventResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublishEventResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublishEventResponse)));
        }

        /// <summary>
        /// Publish an event. Publish a notification against a event. All those who have subscribed to the event will receive notification. The payload that is provided in the Publish will be passed on to each of the subscribers.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishEventRequest"> (optional)</param>
        /// <returns>Task of PublishEventResponse</returns>
        public async System.Threading.Tasks.Task<PublishEventResponse> PublishEventAsync (PublishEventRequest publishEventRequest = null)
        {
             ApiResponse<PublishEventResponse> localVarResponse = await PublishEventAsyncWithHttpInfo(publishEventRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Publish an event. Publish a notification against a event. All those who have subscribed to the event will receive notification. The payload that is provided in the Publish will be passed on to each of the subscribers.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishEventRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (PublishEventResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublishEventResponse>> PublishEventAsyncWithHttpInfo (PublishEventRequest publishEventRequest = null)
        {

            var localVarPath = "/notifications/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publishEventRequest != null && publishEventRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(publishEventRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = publishEventRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublishEventResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublishEventResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublishEventResponse)));
        }

        /// <summary>
        /// Subscribe to a published event Inorder to get the notifications for an event, the product has to subscribe for that event.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscribeEventRequest"> (optional)</param>
        /// <returns>SubscribeEventResponse</returns>
        public SubscribeEventResponse SubscribeNotificationEvent (SubscribeEventRequest subscribeEventRequest = null)
        {
             ApiResponse<SubscribeEventResponse> localVarResponse = SubscribeNotificationEventWithHttpInfo(subscribeEventRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to a published event Inorder to get the notifications for an event, the product has to subscribe for that event.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscribeEventRequest"> (optional)</param>
        /// <returns>ApiResponse of SubscribeEventResponse</returns>
        public ApiResponse< SubscribeEventResponse > SubscribeNotificationEventWithHttpInfo (SubscribeEventRequest subscribeEventRequest = null)
        {

            var localVarPath = "/notifications/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscribeEventRequest != null && subscribeEventRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(subscribeEventRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subscribeEventRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeNotificationEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscribeEventResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscribeEventResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscribeEventResponse)));
        }

        /// <summary>
        /// Subscribe to a published event Inorder to get the notifications for an event, the product has to subscribe for that event.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscribeEventRequest"> (optional)</param>
        /// <returns>Task of SubscribeEventResponse</returns>
        public async System.Threading.Tasks.Task<SubscribeEventResponse> SubscribeNotificationEventAsync (SubscribeEventRequest subscribeEventRequest = null)
        {
             ApiResponse<SubscribeEventResponse> localVarResponse = await SubscribeNotificationEventAsyncWithHttpInfo(subscribeEventRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Subscribe to a published event Inorder to get the notifications for an event, the product has to subscribe for that event.
        /// </summary>
        /// <exception cref="CB.IntegrationService.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscribeEventRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (SubscribeEventResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscribeEventResponse>> SubscribeNotificationEventAsyncWithHttpInfo (SubscribeEventRequest subscribeEventRequest = null)
        {

            var localVarPath = "/notifications/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscribeEventRequest != null && subscribeEventRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(subscribeEventRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subscribeEventRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeNotificationEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscribeEventResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscribeEventResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscribeEventResponse)));
        }

    }
}
